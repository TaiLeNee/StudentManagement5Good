using System;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using StudentManagement5GoodTempp.DataAccess.Context;
using StudentManagement5GoodTempp.DataAccess.Entity;
using Microsoft.EntityFrameworkCore;
using BC = BCrypt.Net.BCrypt;

namespace StudentManagement5Good.Winform
{
    public partial class UserManagementForm : Form
    {
        private readonly IDbContextFactory<StudentManagementDbContext> _contextFactory;
        private readonly User _currentUser;
        private User? _user;
        private bool _isEditMode;

        public UserManagementForm(IDbContextFactory<StudentManagementDbContext> contextFactory, User currentUser, User? user = null)
        {
            _contextFactory = contextFactory;
            _currentUser = currentUser;
            _user = user;
            _isEditMode = user != null;

            InitializeComponent();
            InitializeUI();

            if (_isEditMode && _user != null)
            {
                LoadData();
            }
        }

        private void InitializeUI()
        {
            this.Text = _isEditMode ? "Ch·ªânh s·ª≠a Ng∆∞·ªùi d√πng" : "Th√™m Ng∆∞·ªùi d√πng m·ªõi";

            lblTitle.Text = _isEditMode ? "üìù Ch·ªânh s·ª≠a Ng∆∞·ªùi d√πng" : "‚ûï Th√™m Ng∆∞·ªùi d√πng m·ªõi";
            lblSubtitle.Text = _isEditMode
                ? "C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ng∆∞·ªùi d√πng"
                : "Nh·∫≠p th√¥ng tin chi ti·∫øt cho t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi";
            btnSave.Text = _isEditMode ? "üíæ C·∫≠p nh·∫≠t" : "‚úì Th√™m m·ªõi";

            // Hide UserId field when creating new user (auto-generated GUID)
            if (!_isEditMode)
            {
                lblUserId.Visible = false;
                txtUserId.Visible = false;
                txtUserId.Text = "Auto-generated"; // Placeholder
            }
            else
            {
                txtUserId.ReadOnly = true; // Cannot edit UserId
            }

            // Initialize ComboBox for Roles (based on current user permissions)
            InitializeRoleComboBox();
        }

        private void InitializeRoleComboBox()
        {
            comboBoxRole.Items.Clear();

            // Define which roles can be created by each role based on hierarchy
            switch (_currentUser.VaiTro)
            {
                case UserRoles.ADMIN:
                    // Super Admin can create all roles except ADMIN
                    comboBoxRole.Items.AddRange(new string[]
                    {
                        UserRoles.GIAOVU,
                        UserRoles.DOANTRUONG,
                        UserRoles.DOANKHOA,
                        UserRoles.CVHT,
                        UserRoles.DOANTP,
                        UserRoles.DOANTU,
                        UserRoles.SINHVIEN
                    });
                    break;

                case UserRoles.DOANTU:
                    // ƒêo√†n TU can manage ƒêo√†n TP
                    comboBoxRole.Items.Add(UserRoles.DOANTP);
                    break;

                case UserRoles.DOANTP:
                    // ƒêo√†n TP can manage ƒêo√†n Tr∆∞·ªùng
                    comboBoxRole.Items.Add(UserRoles.DOANTRUONG);
                    break;

                case UserRoles.DOANTRUONG:
                    // ƒêo√†n Tr∆∞·ªùng can manage ƒêo√†n Khoa
                    comboBoxRole.Items.Add(UserRoles.DOANKHOA);
                    break;

                case UserRoles.DOANKHOA:
                    // ƒêo√†n Khoa can manage CVHT
                    comboBoxRole.Items.Add(UserRoles.CVHT);
                    break;

                case UserRoles.GIAOVU:
                    // Gi√°o v·ª• can create students
                    comboBoxRole.Items.Add(UserRoles.SINHVIEN);
                    break;

                case UserRoles.CVHT:
                    // CVHT can create students for their class
                    comboBoxRole.Items.Add(UserRoles.SINHVIEN);
                    break;

                default:
                    // Others cannot create users
                    comboBoxRole.Enabled = false;
                    break;
            }

            if (comboBoxRole.Items.Count > 0)
                comboBoxRole.SelectedIndex = 0;

            // Add event handler for role change
            comboBoxRole.SelectedIndexChanged += ComboBoxRole_SelectedIndexChanged;
        }

        private void ComboBoxRole_SelectedIndexChanged(object? sender, EventArgs e)
        {
            var selectedRole = comboBoxRole.SelectedItem?.ToString();

            // 1. ·∫®n t·∫•t c·∫£ c√°c control g√°n ƒë∆°n v·ªã
            lblThanhPho.Visible = false;
            cmbThanhPho.Visible = false;
            lblTruong.Visible = false;
            cmbTruong.Visible = false;
            lblKhoa.Visible = false;
            cmbKhoa.Visible = false;
            lblLop.Visible = false;
            cmbLop.Visible = false;

            // 2. Ch·ªâ hi·ªÉn th·ªã control ph√π h·ª£p v·ªõi vai tr√≤ ƒë∆∞·ª£c ch·ªçn
            switch (selectedRole)
            {
                case UserRoles.DOANTP:
                    lblThanhPho.Visible = true;
                    cmbThanhPho.Visible = true;
                    LoadThanhPhos(); // T·∫£i danh s√°ch TP
                    break;

                case UserRoles.DOANTRUONG:
                    lblTruong.Visible = true;
                    cmbTruong.Visible = true;
                    LoadTruongs(); // T·∫£i danh s√°ch Tr∆∞·ªùng
                    break;

                case UserRoles.DOANKHOA:
                case UserRoles.GIAOVU: // Gi√°o v·ª• c≈©ng qu·∫£n l√Ω theo Khoa
                    lblKhoa.Visible = true;
                    cmbKhoa.Visible = true;
                    LoadKhoas(); // T·∫£i danh s√°ch Khoa
                    break;

                case UserRoles.CVHT:
                case UserRoles.SINHVIEN:
                    lblLop.Visible = true;
                    cmbLop.Visible = true;
                    LoadLops(); // T·∫£i danh s√°ch L·ªõp
                    break;

                case UserRoles.DOANTU:
                    // Kh√¥ng c·∫ßn g√°n ƒë∆°n v·ªã c·ª• th·ªÉ (qu·∫£n l√Ω to√†n qu·ªëc)
                    break;
            }
        }

        private async void LoadThanhPhos()
        {
            try
            {
                using var context = _contextFactory.CreateDbContext();
                var query = context.ThanhPhos.AsNoTracking().Where(tp => tp.TrangThai == true);

                // Ch·ªâ DOANTU v√† ADMIN m·ªõi c·∫ßn th·∫•y t·∫•t c·∫£ TP
                // C√°c vai tr√≤ kh√°c kh√¥ng c·∫ßn t·∫£i m·ª•c n√†y
                if (_currentUser.VaiTro != UserRoles.DOANTU && _currentUser.VaiTro != UserRoles.ADMIN)
                {
                    query = query.Where(tp => false); // Kh√¥ng t·∫£i g√¨ c·∫£
                }

                var thanhPhos = await query.OrderBy(tp => tp.TenThanhPho).ToListAsync();
                cmbThanhPho.DataSource = thanhPhos;
                cmbThanhPho.DisplayMember = "TenThanhPho";
                cmbThanhPho.ValueMember = "MaTP";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói t·∫£i danh s√°ch th√†nh ph·ªë: {ex.Message}", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void LoadTruongs()
        {
            try
            {
                using var context = _contextFactory.CreateDbContext(); // D√πng Factory
                var query = context.Truongs.AsNoTracking().Where(t => t.TrangThai == true);

                // L·ªåC THEO PH·∫†M VI: Ch·ªâ t·∫£i Tr∆∞·ªùng thu·ªôc Th√†nh ph·ªë c·ªßa ng∆∞·ªùi d√πng DOANTP
                if (_currentUser.VaiTro == UserRoles.DOANTP)
                {
                    query = query.Where(t => t.MaTP == _currentUser.MaTP);
                }
                // ADMIN/DOANTU c√≥ th·ªÉ th·∫•y t·∫•t c·∫£

                var truongs = await query.OrderBy(t => t.TenTruong).ToListAsync();

                cmbTruong.DataSource = truongs;
                cmbTruong.DisplayMember = "TenTruong";
                cmbTruong.ValueMember = "MaTruong"; // QUAN TR·ªåNG
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói t·∫£i danh s√°ch tr∆∞·ªùng: {ex.Message}", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void LoadKhoas()
        {
            try
            {
                using var context = _contextFactory.CreateDbContext(); // D√πng Factory
                var query = context.Khoas.AsNoTracking().Where(k => k.TrangThai == true);

                // L·ªåC THEO PH·∫†M VI: Ch·ªâ t·∫£i Khoa thu·ªôc Tr∆∞·ªùng c·ªßa ng∆∞·ªùi d√πng DOANTRUONG
                if (_currentUser.VaiTro == UserRoles.DOANTRUONG)
                {
                    query = query.Where(k => k.MaTruong == _currentUser.MaTruong);
                }

                var khoas = await query.OrderBy(k => k.TenKhoa).ToListAsync();

                cmbKhoa.DataSource = khoas;
                cmbKhoa.DisplayMember = "TenKhoa";
                cmbKhoa.ValueMember = "MaKhoa"; // QUAN TR·ªåNG
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói t·∫£i danh s√°ch khoa: {ex.Message}", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void LoadLops()
        {
            try
            {
                using var context = _contextFactory.CreateDbContext();
                var query = context.Lops.AsNoTracking().OrderBy(l => l.TenLop);

                // L·ªåC THEO PH·∫†M VI: Ch·ªâ t·∫£i L·ªõp thu·ªôc Khoa c·ªßa ng∆∞·ªùi d√πng DOANKHOA/CVHT/GIAOVU
                if (_currentUser.VaiTro == UserRoles.DOANKHOA || _currentUser.VaiTro == UserRoles.GIAOVU || _currentUser.VaiTro == UserRoles.CVHT)
                {
                    query = query.Where(l => l.MaKhoa == _currentUser.MaKhoa).OrderBy(l => l.TenLop);
                }

                var lops = await query.ToListAsync();
                cmbLop.DataSource = lops;
                cmbLop.DisplayMember = "TenLop";
                cmbLop.ValueMember = "MaLop";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói t·∫£i danh s√°ch l·ªõp: {ex.Message}", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadData()
        {
            if (_user == null) return;

            txtUserId.Text = _user.UserId;
            txtUsername.Text = _user.Username;
            txtHoTen.Text = _user.HoTen;
            txtEmail.Text = _user.Email;
            txtPhone.Text = _user.SoDienThoai;

            // Set role
            var roleIndex = comboBoxRole.FindString(_user.VaiTro ?? "");
            if (roleIndex >= 0)
                comboBoxRole.SelectedIndex = roleIndex;

            checkBoxActive.Checked = _user.TrangThai;

            // Password field
            lblPassword.Text = "M·∫≠t kh·∫©u m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi):";
            txtPassword.Text = "";
        }

        private bool ValidateInput()
        {
            // Skip UserId validation when creating new user (auto-generated GUID)
            // Only validate UserId in edit mode
            if (_isEditMode && string.IsNullOrWhiteSpace(txtUserId.Text))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p User ID!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtUserId.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtUsername.Text))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p Username!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtUsername.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtHoTen.Text))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p H·ªç t√™n!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtHoTen.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtEmail.Text))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p Email!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtEmail.Focus();
                return false;
            }

            if (!_isEditMode && string.IsNullOrWhiteSpace(txtPassword.Text))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p M·∫≠t kh·∫©u!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtPassword.Focus();
                return false;
            }

            if (comboBoxRole.SelectedIndex == -1)
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn Vai tr√≤!", "L·ªói",
                              MessageBoxButtons.OK, MessageBoxIcon.Warning);
                comboBoxRole.Focus();
                return false;
            }

            // Check for duplicate UserId or Username
            if (!_isEditMode)
            {
                using var context = _contextFactory.CreateDbContext();
                var existsUserId = context.Users.Any(u => u.UserId == txtUserId.Text.Trim());
                if (existsUserId)
                {
                    MessageBox.Show("User ID ƒë√£ t·ªìn t·∫°i!", "L·ªói",
                                  MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtUserId.Focus();
                    return false;
                }

                var existsUsername = context.Users.Any(u => u.Username == txtUsername.Text.Trim());
                if (existsUsername)
                {
                    MessageBox.Show("Username ƒë√£ t·ªìn t·∫°i!", "L·ªói",
                                  MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtUsername.Focus();
                    return false;
                }
            }

            return true;
        }

        private async void btnSave_Click(object sender, EventArgs e)
        {
            if (!ValidateInput()) return;

            try
            {
                btnSave.Enabled = false;
                btnCancel.Enabled = false;

                using var context = _contextFactory.CreateDbContext(); // D√πng Factory cho to√†n b·ªô thao t√°c

                // 1. Kh·ªüi t·∫°o c√°c m√£ K·∫ø th·ª´a t·ª´ ng∆∞·ªùi t·∫°o (QUAN TR·ªåNG)
                string? selectedRole = comboBoxRole.SelectedItem?.ToString();

                // Validate role is selected (should already be checked in ValidateInput)
                if (string.IsNullOrEmpty(selectedRole))
                {
                    MessageBox.Show("Vui l√≤ng ch·ªçn vai tr√≤!", "L·ªói",
                                  MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string? capQuanLy = GetCapQuanLyFromRole(selectedRole);
                string? selectedClass = null;
                string? selectedKhoa = _currentUser.MaKhoa;     // K·∫ø th·ª´a
                string? selectedTruong = _currentUser.MaTruong;   // K·∫ø th·ª´a
                string? selectedThanhPho = _currentUser.MaTP;     // K·∫ø th·ª´a

                // 2. Ghi ƒë√® (G√°n m·ªõi) m√£ ƒë∆°n v·ªã c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp t·ª´ ComboBox
                if (cmbLop.Visible)
                {
                    selectedClass = cmbLop.SelectedValue?.ToString();
                }
                if (cmbKhoa.Visible)
                {
                    selectedKhoa = cmbKhoa.SelectedValue?.ToString();
                }
                if (cmbTruong.Visible)
                {
                    selectedTruong = cmbTruong.SelectedValue?.ToString();
                }
                if (cmbThanhPho.Visible)
                {
                    selectedThanhPho = cmbThanhPho.SelectedValue?.ToString();
                }

                if (_isEditMode && _user != null)
                {
                    // Update existing user
                    var userToUpdate = await context.Users.FindAsync(_user.UserId);
                    if (userToUpdate == null) throw new Exception("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t.");

                    userToUpdate.HoTen = txtHoTen.Text.Trim();
                    userToUpdate.Email = txtEmail.Text.Trim();
                    userToUpdate.SoDienThoai = txtPhone.Text.Trim();
                    userToUpdate.VaiTro = selectedRole;
                    userToUpdate.TrangThai = checkBoxActive.Checked;
                    userToUpdate.NgayCapNhat = DateTime.Now;

                    // G√°n l·∫°i m√£ ph√¢n c·∫•p
                    userToUpdate.MaLop = selectedClass;
                    userToUpdate.MaKhoa = selectedKhoa;
                    userToUpdate.MaTruong = selectedTruong;
                    userToUpdate.MaTP = selectedThanhPho;
                    userToUpdate.CapQuanLy = capQuanLy;

                    if (!string.IsNullOrWhiteSpace(txtPassword.Text))
                    {
                        userToUpdate.Password = BC.HashPassword(txtPassword.Text);
                    }

                    context.Users.Update(userToUpdate);
                }
                else
                {
                    // Add new user
                    var newUser = new User
                    {
                        UserId = Guid.NewGuid().ToString("N").Substring(0, 20), // T·∫°o ID ng·∫Øn h∆°n
                        Username = txtUsername.Text.Trim(),
                        Password = BC.HashPassword(txtPassword.Text),
                        HoTen = txtHoTen.Text.Trim(),
                        Email = txtEmail.Text.Trim(),
                        SoDienThoai = txtPhone.Text.Trim(),
                        TrangThai = checkBoxActive.Checked,
                        NgayTao = DateTime.Now,

                        // G√°n vai tr√≤ v√† m√£ ph√¢n c·∫•p
                        VaiTro = selectedRole,
                        MaLop = selectedClass,
                        MaKhoa = selectedKhoa,
                        MaTruong = selectedTruong,
                        MaTP = selectedThanhPho,
                        CapQuanLy = capQuanLy
                    };
                    context.Users.Add(newUser);
                }

                await context.SaveChangesAsync();

                MessageBox.Show(
                    _isEditMode ? "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!" : "Th√™m ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng!",
                    "Th√†nh c√¥ng", MessageBoxButtons.OK, MessageBoxIcon.Information);

                this.DialogResult = DialogResult.OK;
                this.Close();
            }
            catch (Exception ex)
            {
                var errorMessage = $"L·ªói khi l∆∞u d·ªØ li·ªáu:\n\n{ex.Message}";
                if (ex.InnerException != null) errorMessage += $"\n\nChi ti·∫øt: {ex.InnerException.Message}";
                MessageBox.Show(errorMessage, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                btnSave.Enabled = true;
                btnCancel.Enabled = true;
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        // Helper function to get CapQuanLy from VaiTro
        private string? GetCapQuanLyFromRole(string? role)
        {
            return role switch
            {
                UserRoles.CVHT => ManagementLevels.LOP,
                UserRoles.DOANKHOA => ManagementLevels.KHOA,
                UserRoles.DOANTRUONG => ManagementLevels.TRUONG,
                UserRoles.DOANTP => ManagementLevels.TP,
                UserRoles.DOANTU => ManagementLevels.TU,
                _ => null
            };
        }

        private void txtEmail_TextChanged(object sender, EventArgs e)
        {

        }
    }
}

